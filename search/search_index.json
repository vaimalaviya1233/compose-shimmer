{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shimmer for Jetpack Compose &amp; Compose Multiplatform","text":"<p>A library which offers a shimmering effect for Android's Jetpack Compose.</p> <p></p>"},{"location":"#setup","title":"Setup","text":"<p>The library is available on <code>mavenCentral()</code>.</p> <pre><code>dependencies {\nimplementation(\"com.valentinilk.shimmer:compose-shimmer:1.1.0\")\n}\n</code></pre>"},{"location":"#kotlin-multiplatform","title":"Kotlin Multiplatform","text":"<p>Currently supported KMP targets are: - Android - iOS</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>A simple <code>shimmer()</code> modifier is provided, which can be applied like any other modifier in Compose as well.</p> <p>As usual, the order of the modifiers matters. Every visual defined after the <code>shimmer()</code> modifier will be affected by the animation. This includes child views and other modifiers:</p> <pre><code>Box(\nmodifier = Modifier\n.size(128.dp)\n.background(Color.Blue)\n.shimmer(),\ncontentAlignment = Alignment.Center\n) {\nBox(\nmodifier = Modifier\n.size(64.dp)\n.background(Color.Red)\n)\n}\n</code></pre> <p></p> <pre><code>Box(\nmodifier = Modifier\n.size(128.dp)\n.shimmer()\n.background(Color.Blue),\ncontentAlignment = Alignment.Center\n) {\nBox(\nmodifier = Modifier\n.size(64.dp)\n.background(Color.Red)\n)\n}\n</code></pre> <p></p>"},{"location":"#theming","title":"Theming","text":"<p>The library includes a <code>ShimmerTheme</code> which can be provided as a local composition. A good practice would be to integrate the theming into your customized MaterialTheme. There is no need to wrap every single <code>shimmer</code> into a <code>CompositionLocalProvider</code>.</p> <pre><code>val yourShimmerTheme = defaultShimmerTheme.copy(...)\nCompositionLocalProvider(\nLocalShimmerTheme provides yourShimmerTheme\n) {\n[...]\n}\n</code></pre> <p>The theme can also be passed as a parameter by using the <code>rememberShimmer(...)</code> function, which is explained further down below.</p> <p>The theme itself offers a few simple configurations like the shimmer's <code>rotation</code> or <code>width</code>. Additionally a few unabstracted objects like an <code>AnimationSpec</code> or <code>BlendMode</code> are exposed. While this violates the principales of information hiding, it allows for some great customizations.</p> <p>For further information have a look at documentation in data class itself and have a look at the <code>ThemingSamples</code> in the sample app.</p> <p></p>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>The default <code>shimmer()</code> modifier creates a shimmering animation, which will traverse over the view in a certain time. That means that the animation will have a different velocity, depending on the size of the view.</p> <p>If you apply the modifier to multiple views, each of a different size, then each shimmer will have its own velocity. This effect can be seen in the following gif:</p> <p></p> <p>That might not always be the desired effect, that's why the library offers a way to set the boundaries for the animation:</p> <pre><code>val shimmerInstance = rememberShimmer(shimmerBounds = ShimmerBounds.XXX)\nBox(modifier = Modifier.shimmer(shimmerInstance))\n</code></pre>"},{"location":"#shimmerboundsview-default","title":"ShimmerBounds.View (default)","text":"<p>The view's height and width will be used as the boundaries for the animation. This option was used to create the gifs shown above and should be sufficient for most use cases.</p>"},{"location":"#shimmerboundswindow","title":"ShimmerBounds.Window","text":"<p>This option uses the window's height, with and coordinate system for the calculations. It will create a shimmer that travels over the whole window instead of only the views. But only views that have the shimmer modifier attached will be affected.</p> <p>Be aware that this option might look odd on scrollable content, because the shimmer will be positioned relative to the window. So the shimmer will not be moved together with the content.</p> <pre><code>Column {\n  val shimmerInstance = rememberShimmer(shimmerBounds = ShimmerBounds.Window)\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n  Text(\"Non-shimmering Text\")\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n}\n</code></pre> <p></p>"},{"location":"#shimmerboundscustom","title":"ShimmerBounds.Custom","text":"<p>The downsides of the <code>Window</code> option is why the <code>ShimmerBounds.Custom</code> option exists. By using this option, the shimmer and its content will not be drawn until the bounds are set manually by using the <code>updateBounds</code> method on the <code>Shimmer</code>. This can be used to attach the shimmer to a scrollable list for example. Or simply use the default <code>ShimmerBounds.View</code> option.</p> <pre><code>val shimmerInstance = rememberShimmer(ShimmerBounds.Custom)\nColumn(\n  modifier = Modifier\n    .fillMaxSize()\n    .verticalScroll(rememberScrollState())\n    .onGloballyPositioned { layoutCoordinates -&gt;\n      // Util function included in the library\n      val position = layoutCoordinates.unclippedBoundsInWindow()\n      shimmerInstance.updateBounds(position)\n    },\n) {\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n  Text(\"Non-shimmering Text\")\n  Text(\"Shimmering Text\", modifier = Modifier.shimmer(shimmerInstance))\n}\n</code></pre> <p>Updating the bounds will not trigger a recomposition.</p>"},{"location":"#custom-modifier","title":"Custom Modifier","text":"<p>It is also possible to create custom modifiers, if the default one is not convenient enough. One could, for example, create a modifier that takes in the animation duration as a parameter and creates the theming on the go. The whole code can be found in the <code>CustomModifierSample.kt</code> file in the sample app.</p> <pre><code>fun Modifier.shimmer(\n    duration: Int\n): Modifier = composed {\n    val shimmer = rememberShimmer(\n        shimmerBounds = ShimmerBounds.View,\n        theme = createCustomTheme(duration),\n    )\n     shimmer(customShimmer = shimmer)\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2023 Valentin Ilk\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"}]}